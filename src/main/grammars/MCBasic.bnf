

{

  tokens = [
    KEYWORD_FUNC="func"
    KEYWORD_STRUCT="struct"
    KEYWORD_LET="let"
    KEYWORD_RETURN="return"
    KEYWORD_IF="if"
    KEYWORD_ELSE="else"
    KEYWORD_EXEC="exec"
    KEYWORD_IMPORT="import"
    KEYWORD_FROM="from"
    KEYWORD_AS="as"
    KEYWORD_INT="int"
    KEYWORD_STR="str"
    KEYWORD_DOUBLE="double"

    OP_ASSIGN="="
    OP_EQUAL="=="
    OP_NOT_EQUAL="!="
    OP_LESS="<"
    OP_LESS_EQUAL="<="
    OP_GREATER=">"
    OP_GREATER_EQUAL=">="
    OP_PLUS="+"
    OP_MINUS="-"
    OP_STAR="*"
    OP_SLASH="/"
    OP_PERCENT="%"
    OP_AND="and"
    OP_OR="or"
    OP_NOT="!"

    PUNCTUATION_SEMICOLON=";"
    PUNCTUATION_PAREN_OPEN="("
    PUNCTUATION_PAREN_CLOSE=")"
    PUNCTUATION_BRACE_OPEN="{"
    PUNCTUATION_BRACE_CLOSE="}"
    PUNCTUATION_BRACKET_OPEN="["
    PUNCTUATION_BRACKET_CLOSE="]"
    PUNCTUATION_DOT="."
    PUNCTUATION_COMMA=","
  ]

  parserClass="me.kolterdyx.mcbasiclanguage.parser.MCBasicParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="MCBasic"
  psiImplClassSuffix="Impl"
  psiPackage="me.kolterdyx.mcbasiclanguage.psi"
  psiImplPackage="me.kolterdyx.mcbasiclanguage.psi.impl"

  elementTypeHolderClass="me.kolterdyx.mcbasiclanguage.psi.MCBasicTypes"
  elementTypeClass="me.kolterdyx.mcbasiclanguage.psi.MCBasicElementType"
  tokenTypeClass="me.kolterdyx.mcbasiclanguage.psi.MCBasicTokenType"

  psiImplUtilClass="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicPsiImplUtil"


}


mcbasicFile ::= item_*

private item_ ::= (statement|COMMENT|NEWLINE)+

statement ::= KEYWORD_LET variableDeclaration
                | ifStatement
                | KEYWORD_FUNC functionDeclaration
                | blockStatement
                | importStatement
                | returnStatement
                | execStatement
                | KEYWORD_STRUCT structDeclaration
                | expressionStatement
// STATEMENT

private blockStatement ::= PUNCTUATION_LBRACE statement* PUNCTUATION_RBRACE
private importStatement ::= KEYWORD_IMPORT (OP_MULTIPLY | IDENTIFIER (KEYWORD_AS IDENTIFIER)?) KEYWORD_FROM STRING_LITERAL PUNCTUATION_SEMICOLON
variableDeclaration ::= IDENTIFIER type OP_ASSIGN expression PUNCTUATION_SEMICOLON
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicNamedElementImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicNamedElement"
  methods=[getName setName getNameIdentifier]
}
private ifStatement ::= KEYWORD_IF PUNCTUATION_LPAREN expression PUNCTUATION_RPAREN blockStatement (KEYWORD_ELSE blockStatement | ifStatement)?
functionDeclaration ::= IDENTIFIER PUNCTUATION_LPAREN parameterList? PUNCTUATION_RPAREN blockStatement
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicNamedElementImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicNamedElement"
  methods=[getName setName getNameIdentifier]
}
private returnStatement ::= KEYWORD_RETURN expression? PUNCTUATION_SEMICOLON
private execStatement ::= KEYWORD_EXEC expression PUNCTUATION_SEMICOLON
structDeclaration ::= IDENTIFIER PUNCTUATION_LBRACE structField* PUNCTUATION_RBRACE
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicNamedElementImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicNamedElement"
  methods=[getName setName getNameIdentifier]
}
private expressionStatement ::= expression PUNCTUATION_SEMICOLON


// EXPRESSION

private expression ::= or

private or ::= and (OP_OR and)*
private and ::= equality (OP_AND equality)*
private equality ::= relational (EQ_OPERATORS relational)*
private relational ::= additive (RELATIONAL_OPERATORS additive)*
private additive ::= multiplicative (ADDITIVE_OPERATORS multiplicative)*
private multiplicative ::= unary (MULTIPLICATIVE_OPERATORS unary)*
private unary ::= (UNARY_OPERATORS unary) | value
private value ::= baseValue (postFix*)?
baseValue ::= IDENTIFIER | primary
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicReferenceImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicReference"
  methods=[getElement]
}
private postFix ::= arrayAccess | functionCall | memberAccess
private primary ::= literal | PUNCTUATION_LPAREN expression PUNCTUATION_RPAREN

// COMPONENTS


private arrayAccess ::= PUNCTUATION_LBRACKET expression PUNCTUATION_RBRACKET
private functionCall ::= PUNCTUATION_LPAREN argumentList? PUNCTUATION_RPAREN
private memberAccess ::= PUNCTUATION_DOT IDENTIFIER

private parameterList ::= parameter (PUNCTUATION_COMMA parameter)* PUNCTUATION_COMMA?
private argumentList ::= expression (PUNCTUATION_COMMA expression)* PUNCTUATION_COMMA?

parameter ::= IDENTIFIER type
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicNamedElementImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicNamedElement"
  methods=[getName setName getNameIdentifier]
}

private literal ::= STRING_LITERAL
                | INTEGER_LITERAL
                | DOUBLE_LITERAL
                | TRUE_LITERAL
                | FALSE_LITERAL
                | LIST_LITERAL

private LIST_LITERAL ::= PUNCTUATION_LBRACKET argumentList PUNCTUATION_RBRACKET
private type ::= listType | baseType
private baseType ::= KEYWORD_INT
                     | KEYWORD_STR
                     | KEYWORD_DOUBLE
                     | identifierType
identifierType ::= IDENTIFIER
{
  mixin="me.kolterdyx.mcbasiclanguage.psi.impl.MCBasicReferenceImpl"
  implements="me.kolterdyx.mcbasiclanguage.psi.MCBasicReference"
  methods=[getElement]
}
private listType ::= baseType PUNCTUATION_LBRACKET PUNCTUATION_RBRACKET

private structField ::= IDENTIFIER type PUNCTUATION_SEMICOLON

// OPERATORS

private EQ_OPERATORS ::= OP_EQUAL
                            | OP_NOT_EQUAL
private RELATIONAL_OPERATORS ::= OP_LESS
                           | OP_GREATER
                           | OP_LESS_EQUAL
                           | OP_GREATER_EQUAL

private ADDITIVE_OPERATORS ::= OP_PLUS
                            | OP_MINUS

private MULTIPLICATIVE_OPERATORS ::= OP_MULTIPLY
                                    | OP_DIVIDE
                                    | OP_MODULO

private UNARY_OPERATORS ::= OP_NOT
                             | OP_MINUS

IDENTIFIER

private KEYWORD_FUNC ::= "func"
private KEYWORD_LET ::= "let"
private KEYWORD_RETURN ::= "return"
private KEYWORD_IF ::= "if"
private KEYWORD_ELSE ::= "else"
private KEYWORD_EXEC ::= "exec"
private KEYWORD_IMPORT ::= "import"
private KEYWORD_AS ::= "as"
private KEYWORD_FROM ::= "from"
private KEYWORD_STRUCT ::= "struct"
private KEYWORD_INT ::= "int"
private KEYWORD_STR ::= "str"
private KEYWORD_DOUBLE ::= "double"


private OP_EQUAL ::= "=="
private OP_NOT_EQUAL ::= "!="
private OP_LESS ::= "<"
private OP_GREATER ::= ">"
private OP_LESS_EQUAL ::= "<="
private OP_GREATER_EQUAL ::= ">="
private OP_PLUS ::= "+"
private OP_MINUS ::= "-"
private OP_MULTIPLY ::= "*"
private OP_DIVIDE ::= "/"
private OP_MODULO ::= "%"
private OP_NOT ::= "!"
private OP_AND ::= "and"
private OP_OR ::= "or"
private OP_ASSIGN ::= "="
// PUNCTUATION


private PUNCTUATION_COMMA ::= ","
private PUNCTUATION_SEMICOLON ::= ";"
private PUNCTUATION_LPAREN ::= "("
private PUNCTUATION_RPAREN ::= ")"
private PUNCTUATION_LBRACE ::= "{"
private PUNCTUATION_RBRACE ::= "}"
private PUNCTUATION_LBRACKET ::= "["
private PUNCTUATION_RBRACKET ::= "]"
private PUNCTUATION_DOT ::= "."

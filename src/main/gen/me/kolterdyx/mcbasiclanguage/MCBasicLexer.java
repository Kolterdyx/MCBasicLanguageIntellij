// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MCBasic.flex

package me.kolterdyx.mcbasiclanguage;

import com.intellij.psi.tree.IElementType;
import me.kolterdyx.mcbasiclanguage.psi.MCBasicTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


class MCBasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\16\0\4\3\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\2\3\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\12\21\1\3"+
    "\1\22\1\23\1\24\1\25\2\3\4\7\1\26\25\7"+
    "\1\27\1\30\1\31\1\3\1\7\1\3\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\7\1\40\2\7\1\41"+
    "\1\42\1\43\1\44\1\45\1\7\1\46\1\47\1\50"+
    "\1\51\2\7\1\52\2\7\1\53\1\3\1\54\1\3"+
    "\6\0\1\55\32\0\2\3\4\7\4\3\1\7\2\3"+
    "\1\0\7\3\1\7\4\3\1\7\5\3\27\7\1\3"+
    "\37\7\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3"+
    "\1\7\1\3\1\7\21\3\160\0\5\7\1\3\2\7"+
    "\2\3\4\7\1\3\1\7\6\3\1\7\1\3\3\7"+
    "\1\3\1\7\1\3\24\7\1\3\123\7\1\3\213\7"+
    "\1\3\5\0\2\3\246\7\1\3\46\7\2\3\1\7"+
    "\6\3\51\7\6\3\1\7\1\3\55\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\7"+
    "\4\3\4\7\15\3\6\0\5\3\1\7\4\3\13\0"+
    "\1\3\1\0\3\3\53\7\37\0\4\3\2\7\1\0"+
    "\143\7\1\3\1\7\10\0\1\3\6\0\2\7\2\0"+
    "\1\3\4\0\2\7\12\0\3\7\2\3\1\7\17\3"+
    "\1\0\1\7\1\0\36\7\33\0\2\3\131\7\13\0"+
    "\1\7\16\3\12\0\41\7\11\0\2\7\4\3\1\7"+
    "\2\3\1\0\30\7\4\0\1\7\11\0\1\7\3\0"+
    "\1\7\5\0\22\3\31\7\3\0\4\3\13\7\5\3"+
    "\30\7\1\3\6\7\1\3\2\0\6\3\10\0\52\7"+
    "\72\0\66\7\3\0\1\7\22\0\1\7\7\0\12\7"+
    "\2\0\2\3\12\0\1\3\20\7\3\0\1\3\10\7"+
    "\2\3\2\7\2\3\26\7\1\3\7\7\1\3\1\7"+
    "\3\3\4\7\2\3\1\0\1\7\7\0\2\3\2\0"+
    "\2\3\3\0\1\7\10\3\1\0\4\3\2\7\1\3"+
    "\3\7\2\0\2\3\12\0\4\7\7\3\2\7\1\3"+
    "\1\0\2\3\3\0\1\3\6\7\4\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\2\7\1\3"+
    "\2\7\2\3\1\0\1\3\5\0\4\3\2\0\2\3"+
    "\3\0\3\3\1\0\7\3\4\7\1\3\1\7\7\3"+
    "\14\0\3\7\1\0\13\3\3\0\1\3\11\7\1\3"+
    "\3\7\1\3\26\7\1\3\7\7\1\3\2\7\1\3"+
    "\5\7\2\3\1\0\1\7\10\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\7\17\3\2\7\2\0\2\3\12\0"+
    "\1\3\1\7\7\3\1\7\6\0\1\3\3\0\1\3"+
    "\10\7\2\3\2\7\2\3\26\7\1\3\7\7\1\3"+
    "\2\7\1\3\5\7\2\3\1\0\1\7\7\0\2\3"+
    "\2\0\2\3\3\0\7\3\3\0\4\3\2\7\1\3"+
    "\3\7\2\0\2\3\12\0\1\3\1\7\20\3\1\0"+
    "\1\7\1\3\6\7\3\3\3\7\1\3\4\7\3\3"+
    "\2\7\1\3\1\7\1\3\2\7\3\3\2\7\3\3"+
    "\3\7\3\3\14\7\4\3\5\0\3\3\3\0\1\3"+
    "\4\0\2\3\1\7\6\3\1\0\16\3\12\0\11\3"+
    "\1\7\6\3\5\0\10\7\1\3\3\7\1\3\27\7"+
    "\1\3\20\7\2\3\1\0\1\7\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\1\3\3\7\2\3\1\7"+
    "\2\3\2\7\2\0\2\3\12\0\20\3\1\7\3\0"+
    "\1\3\10\7\1\3\3\7\1\3\27\7\1\3\12\7"+
    "\1\3\5\7\2\3\1\0\1\7\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\6\3\2\7\1\3\2\7"+
    "\2\0\2\3\12\0\1\3\2\7\1\0\14\3\4\0"+
    "\11\7\1\3\3\7\1\3\51\7\2\0\1\7\7\0"+
    "\1\3\3\0\1\3\4\0\1\7\5\3\3\7\1\0"+
    "\7\3\3\7\2\0\2\3\12\0\12\3\6\7\1\3"+
    "\3\0\1\3\22\7\3\3\30\7\1\3\11\7\1\3"+
    "\1\7\2\3\7\7\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\6\3\12\0\2\3\2\0\15\3"+
    "\60\7\1\0\2\7\7\0\4\3\10\7\10\0\1\3"+
    "\12\0\47\3\2\7\1\3\1\7\1\3\5\7\1\3"+
    "\30\7\1\3\1\7\1\3\12\7\1\0\2\7\11\0"+
    "\1\7\2\3\5\7\1\3\1\7\1\3\7\0\1\3"+
    "\12\0\2\3\4\7\40\3\1\7\27\3\2\0\6\3"+
    "\12\0\13\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\2\0\10\7\1\3\44\7\4\3\24\0\1\3\2\0"+
    "\5\7\13\0\1\3\44\0\11\3\1\0\71\3\53\7"+
    "\24\0\1\7\12\0\6\3\6\7\4\0\4\7\3\0"+
    "\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0"+
    "\1\7\17\0\2\3\46\7\1\3\1\7\5\3\1\7"+
    "\2\3\53\7\1\3\115\7\1\3\4\7\2\3\7\7"+
    "\1\3\1\7\1\3\4\7\2\3\51\7\1\3\4\7"+
    "\2\3\41\7\1\3\4\7\2\3\7\7\1\3\1\7"+
    "\1\3\4\7\2\3\17\7\1\3\71\7\1\3\4\7"+
    "\2\3\103\7\2\3\3\0\40\3\20\7\20\3\126\7"+
    "\2\3\6\7\3\3\u016c\7\2\3\21\7\1\3\32\7"+
    "\5\3\113\7\3\3\13\7\7\3\22\7\4\0\11\3"+
    "\23\7\3\0\13\3\22\7\2\0\14\3\15\7\1\3"+
    "\3\7\1\3\2\0\14\3\64\7\40\0\3\3\1\7"+
    "\3\3\2\7\1\0\2\3\12\0\41\3\17\0\6\3"+
    "\131\7\7\3\5\7\2\0\42\7\1\0\1\7\5\3"+
    "\106\7\12\3\37\7\1\3\14\0\4\3\14\0\12\3"+
    "\12\0\36\7\2\3\5\7\13\3\54\7\4\3\32\7"+
    "\6\3\12\0\46\3\27\7\5\0\4\3\65\7\12\0"+
    "\1\3\35\0\2\3\13\0\6\3\12\0\15\3\1\7"+
    "\10\3\16\0\1\3\20\0\61\3\5\0\57\7\21\0"+
    "\10\7\3\3\12\0\21\3\11\0\14\3\3\0\36\7"+
    "\15\0\2\7\12\0\54\7\16\0\14\3\44\7\24\0"+
    "\10\3\12\0\3\3\3\7\12\0\44\7\2\3\11\7"+
    "\7\3\53\7\2\3\3\7\20\3\3\0\1\3\25\0"+
    "\4\7\1\0\6\7\1\0\2\7\3\0\1\7\5\3"+
    "\300\7\100\0\26\7\2\3\6\7\2\3\46\7\2\3"+
    "\6\7\2\3\10\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\37\7\2\3\65\7\1\3\7\7\1\3"+
    "\1\7\3\3\3\7\1\3\7\7\3\3\4\7\2\3"+
    "\6\7\4\3\15\7\5\3\3\7\1\3\7\7\16\3"+
    "\5\0\30\3\2\1\5\0\20\3\2\7\23\3\1\7"+
    "\13\3\5\0\1\3\12\0\1\3\1\7\15\3\1\7"+
    "\20\3\15\7\3\3\41\7\17\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\7\4\3\1\7\2\3\12\7"+
    "\1\3\1\7\3\3\5\7\6\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\4\7\1\3\13\7\2\3\4\7"+
    "\5\3\5\7\4\3\1\7\21\3\51\7\u0177\3\345\7"+
    "\6\3\4\7\3\0\2\7\14\3\46\7\1\3\1\7"+
    "\5\3\1\7\2\3\70\7\7\3\1\7\17\3\1\0"+
    "\27\7\11\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\40\0\57\3\1\7\325\3\3\7\31\3"+
    "\11\7\6\0\1\3\5\7\2\3\5\7\4\3\126\7"+
    "\2\3\2\0\2\3\3\7\1\3\132\7\1\3\4\7"+
    "\5\3\53\7\1\3\136\7\21\3\40\7\60\3\320\7"+
    "\100\3\215\7\103\3\56\7\2\3\15\7\3\3\20\7"+
    "\12\0\2\7\24\3\57\7\1\0\4\3\12\0\1\3"+
    "\37\7\2\0\120\7\2\0\45\3\11\7\2\3\147\7"+
    "\2\3\100\7\5\3\2\7\1\3\1\7\1\3\5\7"+
    "\30\3\20\7\1\0\3\7\1\0\4\7\1\0\27\7"+
    "\5\0\4\3\1\0\13\3\1\7\7\3\64\7\14\3"+
    "\2\0\62\7\22\0\12\3\12\0\6\3\22\0\6\7"+
    "\3\3\1\7\1\3\2\7\13\0\34\7\10\0\2\3"+
    "\27\7\15\0\14\3\35\7\3\3\4\0\57\7\16\0"+
    "\16\3\1\7\12\0\6\3\5\7\1\0\12\7\12\0"+
    "\5\7\1\3\51\7\16\0\11\3\3\7\1\0\10\7"+
    "\2\0\2\3\12\0\6\3\27\7\3\3\1\7\3\0"+
    "\62\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\3\3\7\2\3\13\7\5\0"+
    "\2\3\3\7\2\0\12\3\6\7\2\3\6\7\2\3"+
    "\6\7\11\3\7\7\1\3\7\7\1\3\53\7\1\3"+
    "\16\7\6\3\163\7\10\0\1\3\2\0\2\3\12\0"+
    "\6\3\244\7\14\3\27\7\4\3\61\7\4\3\156\7"+
    "\2\3\152\7\46\3\7\7\14\3\5\7\5\3\1\7"+
    "\1\0\12\7\1\3\15\7\1\3\5\7\1\3\1\7"+
    "\1\3\2\7\1\3\2\7\1\3\154\7\41\3\153\7"+
    "\22\3\100\7\2\3\66\7\50\3\15\7\3\3\20\0"+
    "\20\3\20\0\3\3\2\7\30\3\3\7\31\3\1\7"+
    "\6\3\5\7\1\3\207\7\2\3\1\0\4\3\1\7"+
    "\13\3\12\0\7\3\32\7\4\3\1\7\1\3\32\7"+
    "\13\3\131\7\3\3\6\7\2\3\6\7\2\3\6\7"+
    "\2\3\3\7\3\3\2\7\3\3\2\7\22\3\3\0"+
    "\4\3\14\7\1\3\32\7\1\3\23\7\1\3\2\7"+
    "\1\3\17\7\2\3\16\7\42\3\173\7\105\3\65\7"+
    "\210\3\1\0\202\3\35\7\3\3\61\7\17\3\1\0"+
    "\37\3\40\7\15\3\36\7\5\3\46\7\5\0\5\3"+
    "\36\7\2\3\44\7\4\3\10\7\1\3\5\7\52\3"+
    "\236\7\2\3\12\0\6\3\44\7\4\3\44\7\4\3"+
    "\50\7\10\3\64\7\14\3\13\7\1\3\17\7\1\3"+
    "\7\7\1\3\2\7\1\3\13\7\1\3\17\7\1\3"+
    "\7\7\1\3\2\7\103\3\67\7\11\3\26\7\12\3"+
    "\10\7\30\3\6\7\1\3\52\7\1\3\11\7\105\3"+
    "\6\7\2\3\1\7\1\3\54\7\1\3\2\7\3\3"+
    "\1\7\2\3\27\7\12\3\27\7\11\3\37\7\101\3"+
    "\23\7\1\3\2\7\12\3\26\7\12\3\32\7\106\3"+
    "\70\7\6\3\2\7\100\3\1\7\3\0\1\3\2\0"+
    "\5\3\4\0\4\7\1\3\3\7\1\3\35\7\2\3"+
    "\3\0\4\3\1\0\40\3\35\7\3\3\35\7\43\3"+
    "\10\7\1\3\34\7\2\0\31\3\66\7\12\3\26\7"+
    "\12\3\23\7\15\3\22\7\156\3\111\7\67\3\63\7"+
    "\15\3\63\7\15\3\44\7\4\0\10\3\12\0\u0146\3"+
    "\52\7\1\3\2\0\3\3\2\7\113\3\3\0\35\7"+
    "\12\3\1\7\10\3\26\7\13\0\37\3\22\7\4\0"+
    "\52\3\25\7\33\3\27\7\11\3\3\0\65\7\17\0"+
    "\37\3\13\0\2\7\2\0\1\7\11\3\4\0\55\7"+
    "\13\0\2\3\1\0\4\3\1\0\12\3\1\0\2\3"+
    "\31\7\7\3\12\0\6\3\3\0\44\7\16\0\1\3"+
    "\12\0\4\3\1\7\2\0\1\7\10\3\43\7\1\0"+
    "\2\3\1\7\11\3\3\0\60\7\16\0\4\7\4\3"+
    "\4\0\1\3\14\0\1\7\1\3\1\7\43\3\22\7"+
    "\1\3\31\7\14\0\6\3\1\0\2\7\1\0\76\3"+
    "\7\7\1\3\1\7\1\3\4\7\1\3\17\7\1\3"+
    "\12\7\7\3\57\7\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\7\2\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\5\7\1\3\2\0\1\7\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\7\6\3\1\0"+
    "\5\3\5\7\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\7\22\0\4\7\5\3\12\0\4\3\1\0\3\7"+
    "\36\3\60\7\24\0\2\7\1\3\1\7\10\3\12\0"+
    "\246\3\57\7\7\0\2\3\11\0\27\3\4\7\2\0"+
    "\42\3\60\7\21\0\3\3\1\7\13\3\12\0\46\3"+
    "\53\7\15\0\1\7\7\3\12\0\66\3\33\7\2\3"+
    "\17\0\4\3\12\0\6\3\7\7\271\3\54\7\17\0"+
    "\145\3\100\7\12\0\25\3\10\7\2\3\1\7\2\3"+
    "\10\7\1\3\2\7\1\3\30\7\6\0\1\3\2\0"+
    "\2\3\4\0\1\7\1\0\1\7\2\0\14\3\12\0"+
    "\106\3\10\7\2\3\47\7\7\0\2\3\7\0\1\7"+
    "\1\3\1\7\1\0\33\3\1\7\12\0\50\7\7\0"+
    "\1\7\4\0\10\3\1\0\10\3\1\7\13\0\56\7"+
    "\20\0\3\3\1\7\22\3\111\7\7\3\11\7\1\3"+
    "\45\7\10\0\1\3\10\0\1\7\17\3\12\0\30\3"+
    "\36\7\2\3\26\0\1\3\16\0\111\3\7\7\1\3"+
    "\2\7\1\3\46\7\6\0\3\3\1\0\1\3\2\0"+
    "\1\3\7\0\1\7\1\0\10\3\12\0\6\3\6\7"+
    "\1\3\2\7\1\3\40\7\5\0\1\3\2\0\1\3"+
    "\5\0\1\7\7\3\12\0\u0136\3\23\7\4\0\11\3"+
    "\2\0\1\7\1\0\15\7\1\3\42\7\7\0\3\3"+
    "\5\0\15\3\12\0\126\3\1\7\54\3\4\7\37\3"+
    "\232\7\146\3\157\7\21\3\304\7\u014c\3\141\7\17\3"+
    "\60\7\21\0\6\7\17\0\252\3\107\7\271\3\71\7"+
    "\7\3\37\7\1\3\12\0\6\3\117\7\1\3\12\0"+
    "\6\3\36\7\2\3\5\0\13\3\60\7\7\0\11\3"+
    "\4\7\14\3\12\0\11\3\25\7\5\3\23\7\260\3"+
    "\100\7\200\3\113\7\4\3\1\0\1\7\67\0\7\3"+
    "\4\0\15\7\100\3\2\7\1\3\1\7\1\0\13\3"+
    "\2\0\16\3\370\7\10\3\326\7\52\3\11\7\u01e7\3"+
    "\4\7\1\3\7\7\1\3\2\7\1\3\43\7\17\3"+
    "\1\7\35\3\3\7\2\3\1\7\16\3\4\7\10\3"+
    "\u018c\7\4\3\153\7\5\3\15\7\3\3\11\7\7\3"+
    "\12\7\3\3\2\0\1\3\4\0\134\3\56\0\2\3"+
    "\27\0\u011e\3\5\0\3\3\26\0\2\3\7\0\36\3"+
    "\4\0\224\3\3\0\273\3\125\7\1\3\107\7\1\3"+
    "\2\7\2\3\1\7\2\3\2\7\2\3\4\7\1\3"+
    "\14\7\1\3\1\7\1\3\7\7\1\3\101\7\1\3"+
    "\4\7\2\3\10\7\1\3\7\7\1\3\34\7\1\3"+
    "\4\7\1\3\5\7\1\3\1\7\3\3\7\7\1\3"+
    "\u0154\7\2\3\31\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\10\7\2\3"+
    "\151\0\4\3\62\0\10\3\1\0\16\3\1\0\26\3"+
    "\5\0\1\3\17\0\120\3\37\7\6\3\6\7\325\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\5\3\76\7\41\3\1\0\160\3\55\7\3\3"+
    "\7\0\7\7\2\3\12\0\4\3\1\7\u0141\3\36\7"+
    "\1\0\21\3\54\7\16\0\5\3\1\7\320\3\34\7"+
    "\16\0\346\3\7\7\1\3\4\7\1\3\2\7\1\3"+
    "\17\7\1\3\305\7\13\3\7\0\51\3\104\7\7\0"+
    "\1\7\4\3\12\0\u0156\3\1\7\117\3\4\7\1\3"+
    "\33\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\12\7\1\3\4\7\1\3\1\7\1\3\1\7\6\3"+
    "\1\7\4\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\3\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\2\7\1\3\1\7\2\3\4\7\1\3\7\7\1\3"+
    "\4\7\1\3\4\7\1\3\1\7\1\3\12\7\1\3"+
    "\21\7\5\3\3\7\1\3\5\7\1\3\21\7\u0134\3"+
    "\12\0\6\3\340\7\40\3\72\7\6\3\336\7\2\3"+
    "\u0182\7\16\3\u0131\7\37\3\36\7\342\3\113\7\5\3"+
    "\u0160\7\121\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\11\6"+
    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\0"+
    "\1\35\1\36\1\37\1\6\1\40\5\6\1\41\3\6"+
    "\1\42\2\6\1\31\1\0\1\43\6\6\1\44\1\45"+
    "\1\6\1\46\1\0\1\34\1\6\1\47\1\50\1\51"+
    "\1\52\7\6\1\53\1\54\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\134\0\346\0\u0114"+
    "\0\134\0\134\0\134\0\134\0\134\0\134\0\134\0\u0142"+
    "\0\134\0\u0170\0\134\0\u019e\0\u01cc\0\u01fa\0\134\0\134"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\134\0\134\0\u03c6\0\134\0\u03f4\0\134\0\u0422"+
    "\0\u0142\0\134\0\134\0\134\0\u0450\0\u0114\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0114\0\u0564\0\u0592\0\u05c0\0\u0114"+
    "\0\u05ee\0\u061c\0\134\0\u064a\0\u0114\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u0114\0\u0114\0\u078c\0\u07ba\0\u07e8"+
    "\0\u07e8\0\u0816\0\u0114\0\u0114\0\u0114\0\u0114\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0114\0\u0114\0\u0114"+
    "\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\10\1\27\1\3"+
    "\1\30\1\31\2\10\1\32\1\33\1\34\1\35\1\36"+
    "\2\10\1\37\1\10\1\40\1\41\3\10\1\42\1\43"+
    "\1\4\2\44\1\3\2\44\1\45\22\44\1\46\25\44"+
    "\57\0\2\4\52\0\1\4\24\0\1\47\31\0\2\7"+
    "\1\0\53\7\1\10\6\0\1\10\11\0\1\10\4\0"+
    "\1\10\3\0\21\10\2\0\1\10\21\0\1\50\53\0"+
    "\1\51\1\0\1\22\60\0\1\52\55\0\1\53\55\0"+
    "\1\54\31\0\1\10\6\0\1\10\11\0\1\10\4\0"+
    "\1\10\3\0\11\10\1\55\3\10\1\56\3\10\2\0"+
    "\2\10\6\0\1\10\11\0\1\10\4\0\1\10\3\0"+
    "\12\10\1\57\6\10\2\0\2\10\6\0\1\10\11\0"+
    "\1\10\4\0\1\10\3\0\7\10\1\60\10\10\1\61"+
    "\2\0\2\10\6\0\1\10\11\0\1\10\4\0\1\10"+
    "\3\0\14\10\1\62\2\10\1\63\1\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\5\10"+
    "\1\64\2\10\1\65\1\66\7\10\2\0\2\10\6\0"+
    "\1\10\11\0\1\10\4\0\1\10\3\0\4\10\1\67"+
    "\14\10\2\0\2\10\6\0\1\10\11\0\1\10\4\0"+
    "\1\10\3\0\14\10\1\70\4\10\2\0\2\10\6\0"+
    "\1\10\11\0\1\10\4\0\1\10\3\0\4\10\1\71"+
    "\14\10\2\0\2\10\6\0\1\10\11\0\1\10\4\0"+
    "\1\10\3\0\16\10\1\72\2\10\2\0\1\10\2\44"+
    "\1\0\2\44\1\0\22\44\1\0\25\44\43\0\1\73"+
    "\33\0\1\50\4\0\1\74\7\0\1\74\17\0\1\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\3\10"+
    "\1\75\15\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\17\10\1\76\1\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\15\10"+
    "\1\77\3\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\4\10\1\100\14\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\12\10"+
    "\1\101\6\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\11\10\1\102\7\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\13\10"+
    "\1\103\5\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\16\10\1\104\2\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\16\10"+
    "\1\105\2\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\16\10\1\106\2\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\14\10"+
    "\1\107\4\10\2\0\1\10\14\0\1\110\1\0\1\110"+
    "\2\0\1\111\34\0\1\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\1\10\1\112\17\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\4\10"+
    "\1\113\14\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\2\10\1\114\16\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\10\10"+
    "\1\115\10\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\2\10\1\116\16\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\12\10"+
    "\1\117\6\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\17\10\1\120\1\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\17\10"+
    "\1\121\1\10\2\0\1\10\21\0\1\111\34\0\1\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\7\10"+
    "\1\122\11\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\14\10\1\123\4\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\14\10"+
    "\1\124\4\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\2\10\1\125\16\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\4\10"+
    "\1\126\14\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\16\10\1\127\2\10\2\0\2\10"+
    "\6\0\1\10\11\0\1\10\4\0\1\10\3\0\11\10"+
    "\1\130\7\10\2\0\2\10\6\0\1\10\11\0\1\10"+
    "\4\0\1\10\3\0\16\10\1\131\2\10\2\0\1\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2438];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\2\1\7\11\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\11\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\3\11\16\1\1\11\1\0"+
    "\13\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MCBasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 47: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_NOT;
            }
          // fall through
          case 49: break;
          case 4:
            { yybegin(STRING);
            }
          // fall through
          case 50: break;
          case 5:
            { yybegin(YYINITIAL); return MCBasicTypes.COMMENT;
            }
          // fall through
          case 51: break;
          case 6:
            { yybegin(YYINITIAL); return MCBasicTypes.IDENTIFIER;
            }
          // fall through
          case 52: break;
          case 7:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_PERCENT;
            }
          // fall through
          case 53: break;
          case 8:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_PAREN_OPEN;
            }
          // fall through
          case 54: break;
          case 9:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_PAREN_CLOSE;
            }
          // fall through
          case 55: break;
          case 10:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_STAR;
            }
          // fall through
          case 56: break;
          case 11:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_PLUS;
            }
          // fall through
          case 57: break;
          case 12:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_COMMA;
            }
          // fall through
          case 58: break;
          case 13:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_MINUS;
            }
          // fall through
          case 59: break;
          case 14:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_DOT;
            }
          // fall through
          case 60: break;
          case 15:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_SLASH;
            }
          // fall through
          case 61: break;
          case 16:
            { yybegin(YYINITIAL); return MCBasicTypes.INTEGER_LITERAL;
            }
          // fall through
          case 62: break;
          case 17:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_SEMICOLON;
            }
          // fall through
          case 63: break;
          case 18:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_LESS;
            }
          // fall through
          case 64: break;
          case 19:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_ASSIGN;
            }
          // fall through
          case 65: break;
          case 20:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_GREATER;
            }
          // fall through
          case 66: break;
          case 21:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_BRACKET_OPEN;
            }
          // fall through
          case 67: break;
          case 22:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_BRACKET_CLOSE;
            }
          // fall through
          case 68: break;
          case 23:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_BRACE_OPEN;
            }
          // fall through
          case 69: break;
          case 24:
            { yybegin(YYINITIAL); return MCBasicTypes.PUNCTUATION_BRACE_CLOSE;
            }
          // fall through
          case 70: break;
          case 25:
            { 
            }
          // fall through
          case 71: break;
          case 26:
            { yybegin(YYINITIAL); return MCBasicTypes.STRING_LITERAL;
            }
          // fall through
          case 72: break;
          case 27:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_NOT_EQUAL;
            }
          // fall through
          case 73: break;
          case 28:
            { yybegin(YYINITIAL); return MCBasicTypes.DOUBLE_LITERAL;
            }
          // fall through
          case 74: break;
          case 29:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_LESS_EQUAL;
            }
          // fall through
          case 75: break;
          case 30:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_EQUAL;
            }
          // fall through
          case 76: break;
          case 31:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_GREATER_EQUAL;
            }
          // fall through
          case 77: break;
          case 32:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_AS;
            }
          // fall through
          case 78: break;
          case 33:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_IF;
            }
          // fall through
          case 79: break;
          case 34:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_OR;
            }
          // fall through
          case 80: break;
          case 35:
            { yybegin(YYINITIAL); return MCBasicTypes.OP_AND;
            }
          // fall through
          case 81: break;
          case 36:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_INT;
            }
          // fall through
          case 82: break;
          case 37:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_LET;
            }
          // fall through
          case 83: break;
          case 38:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_STR;
            }
          // fall through
          case 84: break;
          case 39:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_ELSE;
            }
          // fall through
          case 85: break;
          case 40:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_EXEC;
            }
          // fall through
          case 86: break;
          case 41:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_FROM;
            }
          // fall through
          case 87: break;
          case 42:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_FUNC;
            }
          // fall through
          case 88: break;
          case 43:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_DOUBLE;
            }
          // fall through
          case 89: break;
          case 44:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_IMPORT;
            }
          // fall through
          case 90: break;
          case 45:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_RETURN;
            }
          // fall through
          case 91: break;
          case 46:
            { yybegin(YYINITIAL); return MCBasicTypes.KEYWORD_STRUCT;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
